import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../../app/store";
//import { fetchCount } from './counterAPI';

export interface PokemonState {
  name: string;
  types: string[];
  status: "idle" | "loading" | "failed";
}

const initialState: PokemonState = {
  name: "Pikachu",
  types: ["electric"],
  status: "idle",
};

// const fetchPokemon = async () => {
//   const randomId = Math.floor(Math.random() * 151);
//   const pokedata = await fetch("https://pokeapi.co/api/v2/pokemon/" + randomId);
//   return pokedata;
// };

// export const getRandomPokemon = createAsyncThunk(
//   "pokemon/getRandomPokemon",
//   async () => {
//     const response = await fetchPokemon();
//     // The value we return becomes the `fulfilled` action payload
//     console.log("response: ", response);
//     return response;
//   }
// );

export const pokemonSlice = createSlice({
  name: "pokemon",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    uppercase: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.name = state.name.toUpperCase();
    },
    lowercase: (state) => {
      state.name = state.name.toLowerCase();
    },
  },
  //   // The `extraReducers` field lets the slice handle actions defined elsewhere,
  //   // including actions generated by createAsyncThunk or in other slices.
  //   extraReducers: (builder) => {
  //     builder
  //       .addCase(getRandomPokemon.pending, (state) => {
  //         state.status = 'loading';
  //       })
  //       .addCase(getRandomPokemon.fulfilled, (state, action) => {
  //         state.status = 'idle';
  //         state.name = getRandomPokemon
  //       })
  //       .addCase(getRandomPokemon.rejected, (state) => {
  //         state.status = 'failed';
  //       });
  //   },
});

export const { uppercase, lowercase } = pokemonSlice.actions;
